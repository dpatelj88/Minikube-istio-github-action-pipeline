# Add these environment variables to your GitHub repository settings
# DOCKER_USERNAME: your Docker Hub username
# DOCKER_PASSWORD: your Docker Hub password or access token

name: BookInfo CI/CD with Istio

on:
  push:
    branches:
      - main

jobs:
  MiniKube_Setup:
    name: Setup Minikube & clean up
    runs-on: self-hosted
    outputs:
      minikube_ip: ${{ steps.set-ip.outputs.minikube_ip }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Docker Permissions
      run: |
        if ! command -v docker &> /dev/null; then
          sudo apt update -y
          sudo apt install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
        fi
        sudo usermod -aG docker $USER
        docker ps || echo "Docker access may require runner restart"

    - name: Docker Login
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Install kubectl
      run: |
        if ! command -v kubectl &> /dev/null; then
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mkdir -p $HOME/bin
          mv kubectl $HOME/bin/
          echo "PATH=$HOME/bin:$PATH" >> $GITHUB_ENV
        else
          echo "kubectl already installed."
        fi
        export PATH="$HOME/bin:$PATH"
        kubectl version --client || echo "kubectl installation failed"

    - name: Install Minikube
      run: |
        if ! command -v minikube &> /dev/null; then
          echo "Installing Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube-linux-amd64
          mkdir -p $HOME/bin
          mv minikube-linux-amd64 $HOME/bin/minikube
          echo "PATH=$HOME/bin:$PATH" >> $GITHUB_ENV
        else
          echo "Minikube already installed."
        fi
        export PATH="$HOME/bin:$PATH"
        minikube version || echo "Minikube installation failed"

    - name: Start Minikube
      run: |
        export PATH="$HOME/bin:$PATH"
        if ! minikube status; then
          echo "Starting Minikube..."
          minikube start --driver=docker --alsologtostderr
        else
          echo "Minikube is already running."
          kubectl delete all --all --namespace=default
          kubectl delete all --all -n istio-system
        fi
        minikube status || (minikube logs && exit 1)

    - name: Set Minikube IP
      id: set-ip
      run: |
        export PATH="$HOME/bin:$PATH"
        MINIKUBE_IP=$(minikube ip)
        if [ -z "$MINIKUBE_IP" ]; then
          echo "ERROR: Failed to get Minikube IP"
          minikube status
          minikube logs
          exit 1
        fi
        echo "MINIKUBE_IP=$MINIKUBE_IP" >> $GITHUB_ENV
        echo "minikube_ip=$MINIKUBE_IP" >> $GITHUB_OUTPUT

  istioctl_install:
    runs-on: self-hosted
    needs: [MiniKube_Setup]
    env:
      MINIKUBE_IP: ${{ needs.MiniKube_Setup.outputs.minikube_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubectl (if not already present)
        run: |
          if ! command -v kubectl &> /dev/null; then
            echo "Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          kubectl version --client

      - name: Check and Install Istio
        run: |
          if [ ! -d "$HOME/istio-1.25.0" ]; then
            echo "Istio not found. Downloading and installing Istio 1.25.0 to $HOME..."
            curl -LO https://github.com/istio/istio/releases/download/1.25.0/istio-1.25.0-linux-amd64.tar.gz
            tar -xzf istio-1.25.0-linux-amd64.tar.gz -C $HOME
            rm istio-1.25.0-linux-amd64.tar.gz
          else
            echo "Istio directory already exists at $HOME/istio-1.25.0"
          fi
          export PATH="$HOME/istio-1.25.0/bin:$PATH"
          echo "PATH updated: $PATH"
          ls -l "$HOME/istio-1.25.0/bin/istioctl" || echo "istioctl not found in $HOME/istio-1.25.0/bin"
          if ! command -v istioctl &> /dev/null; then
            echo "ERROR: istioctl not found after setting PATH. Exiting..."
            exit 1
          fi
          if kubectl get pod -n istio-system -l app=istiod --no-headers 2>/dev/null | grep -q Running; then
            echo "Istio is already installed and running in the cluster."
            kubectl get pods -n istio-system
          else
            echo "Istio not found or not running in cluster. Installing Istio into Minikube..."
            istioctl install --set profile=demo -y
            kubectl label namespace default istio-injection=enabled --overwrite
            echo "Istio installed successfully."
            istioctl x precheck
            kubectl get pods -n istio-system
          fi
          echo "Minikube IP: $MINIKUBE_IP"

  Deploy_BookInfo:
    runs-on: self-hosted
    needs: [istioctl_install]
    env:
      MINIKUBE_IP: ${{ needs.MiniKube_Setup.outputs.minikube_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy BookInfo App
        run: |
          export PATH="$HOME/istio-1.25.0/bin:$PATH"
          kubectl label namespace default istio-injection=enabled --overwrite || echo "Namespace already labeled"
          kubectl apply -f bookinfo.yaml
          kubectl apply -f bookinfo-gateway.yaml
          kubectl rollout status deployment/productpage-v1 -n default
          # Verify BookInfo pods
          echo "Listing BookInfo pods in default namespace:"
          kubectl get pods -n default
          # Debug pods that aren't fully ready
          echo "Checking for pods that aren't fully ready:"
          for pod in $(kubectl get pods -n default --no-headers | grep -v "2/2" | awk '{print $1}'); do
            echo "Pod $pod is not fully ready. Describing pod:"
            kubectl describe pod $pod -n default
            echo "Logs for $pod (application container):"
            kubectl logs $pod -n default --container=reviews || echo "No logs available"
            echo "Logs for $pod (istio-proxy container):"
            kubectl logs $pod -n default --container=istio-proxy || echo "No logs available"
          done
          # Verify Gateway and VirtualService
          echo "Listing Gateway and VirtualService:"
          kubectl get gateway -n default
          kubectl get virtualservice -n default
          # Get the ingress URL
          export INGRESS_HOST=$(minikube ip)
          export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
          export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
          echo "BookInfo is accessible at: http://$GATEWAY_URL/productpage"
          # Test the URL with curl
          echo "Testing access to BookInfo with curl:"
          curl -s -o /dev/null -w "%{http_code}" http://$GATEWAY_URL/productpage || echo "Failed to access BookInfo"
          # Test the URL with curl
          echo "Testing access to BookInfo with curl:"
          curl -s -o /dev/null -w "%{http_code}" http://$GATEWAY_URL/productpage || echo "Failed to access BookInfo"
